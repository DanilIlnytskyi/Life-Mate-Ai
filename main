#!/usr/bin/env python3
"""
LifeMate AI ‚Äî Telegram Bot MVP (—Å –¥–µ–ø–ª–æ–µ–º –∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏)
=======================================================
–ò–∑–º–µ–Ω–µ–Ω–∏—è:
  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–º–µ—Ä –¥–µ–ø–ª–æ—è –Ω–∞ Railway/Render
  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ (ReplyKeyboard)
  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è RU/UA (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /lang)

–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–æ—Ç –∂–µ: –∑–∞–¥–∞—á–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –ø—Ä–∏–≤—ã—á–∫–∏, —Ä–∞—Å—Ö–æ–¥—ã, –ò–ò-–æ—Ç–≤–µ—Ç—ã.
"""

from __future__ import annotations

import asyncio
import os
import re
import sqlite3
from datetime import datetime, timedelta, time as dt_time
from typing import Optional

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ===================== –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è =====================
LANG_TEXTS = {
    "ru": {
        "start": "üëã *LifeMate AI* ‚Äî —Ç–≤–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∂–∏–∑–Ω–∏.",
        "menu": [
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
            ["üî• –ü—Ä–∏–≤—ã—á–∫–∏", "üí∞ –†–∞—Å—Ö–æ–¥—ã"],
            ["‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "ü§ñ AI –°–æ–≤–µ—Ç"]
        ],
        "help": "–ö–æ–º–∞–Ω–¥—ã:\n/addtask, /list, /done, /remind, /addhabit, /checkin, /streaks, /expense, /stats, /ai, /lang",
        "lang_switched": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π",
    },
    "ua": {
        "start": "üëã *LifeMate AI* ‚Äî —Ç–≤—ñ–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∂–∏—Ç—Ç—è.",
        "menu": [
            ["‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–¥–∞—á—É", "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"],
            ["üî• –ó–≤–∏—á–∫–∏", "üí∞ –í–∏—Ç—Ä–∞—Ç–∏"],
            ["‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è", "ü§ñ AI –ü–æ—Ä–∞–¥–∞"]
        ],
        "help": "–ö–æ–º–∞–Ω–¥–∏:\n/addtask, /list, /done, /remind, /addhabit, /checkin, /streaks, /expense, /stats, /ai, /lang",
        "lang_switched": "–ú–æ–≤—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É",
    },
}

USER_LANG = {}  # user_id -> lang code


def get_lang(user_id: int) -> str:
    return USER_LANG.get(user_id, "ru")


# ===================== DB INIT =====================
DB_PATH = "lifemate.db"

def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = get_db()
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        lang TEXT DEFAULT 'ru'
    );
    """)
    conn.commit()
    conn.close()


# ===================== HANDLERS =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    lang = get_lang(uid)
    texts = LANG_TEXTS[lang]
    keyboard = ReplyKeyboardMarkup(texts["menu"], resize_keyboard=True)
    await update.message.reply_text(texts["start"], parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard)
    await update.message.reply_text(texts["help"])


async def lang(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if get_lang(uid) == "ru":
        USER_LANG[uid] = "ua"
    else:
        USER_LANG[uid] = "ru"
    lang = get_lang(uid)
    texts = LANG_TEXTS[lang]
    await update.message.reply_text(texts["lang_switched"])
    keyboard = ReplyKeyboardMarkup(texts["menu"], resize_keyboard=True)
    await update.message.reply_text(texts["help"], reply_markup=keyboard)


# ===================== APP =====================
async def main():
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise SystemExit("Set TELEGRAM_BOT_TOKEN env var")

    init_db()
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("lang", lang))

    # fallback: echo –∫–Ω–æ–ø–æ–∫
    async def button_echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /help")

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_echo))

    print("LifeMate AI bot running‚Ä¶")
    await app.run_polling()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bye üëã")


# ===================== DEPLOY HINTS =====================
"""
Deploy –Ω–∞ Railway / Render (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
--------------------------------------
1. –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ railway.app –∏–ª–∏ render.com
2. –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç -> "Deploy from GitHub repo"
3. –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∫–æ–¥ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
4. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
   TELEGRAM_BOT_TOKEN=123456:ABC...
   (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) OPENAI_API_KEY=sk-...
5. Deploy ‚Äî —Å–µ—Ä–≤–∏—Å —Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞ (Procfile: `python lifemate_bot.py`)

Railway: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —á–∞—Å—ã, Render: free web service 750h/–º–µ—Å
"""
